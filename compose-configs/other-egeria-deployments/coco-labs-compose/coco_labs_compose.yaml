---
# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project
#
# This script configures and starts the Coco Labs Demonstration environment for Egeria.
#
# To run
#   * Ensure Docker is installed and running
#   * Start Egeria Platform stack from the 'coco-labs-compose' folder using:
#     'docker compose -f ./coco_labs_compose.yaml up --build'
#   * Subsequent startups can be performed without the '--build' at the end
#   * Uninstall the containers by issuing `docker compose -f ./coco_labs_compose.yaml down`
#
# Assumptions:
#   * Ports 9443 and 9192 are available on the host system - these are the default ports for Kafka and Egeria.
#   * by default, the jupyter notebooks in the 'coco-jupyter-labs' folder are mounted and
#     available for use by the jupyter notebooks
#   * by default, strict SSL validation is turned off
#
#

services:
  jupyter-coco:
    depends_on:
      egeria-coco-core:
        condition: service_healthy
      egeria-coco-datalake:
        condition: service_healthy
      egeria-coco-development:
        condition: service_healthy

    image: quay.io/jupyter/scipy-notebook
    container_name: coco-jupyter-hub
    networks:
      - egeria_coco_network
    ports:
      - '7888:7888'
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "egeria"
      JUPYTER_PORT: 7888
    build:
      dockerfile: Dockerfile-jupyter

    volumes:
      - ./before-notebook.d:/usr/local/bin/before-notebook.d
      - ./coco-labs-notebooks/:/home/jovyan/labs
      - ../../exchange/distribution-hub:/home/jovyan/distribution-hub
      - ../../exchange/loading-bay:/home/jovyan/loading-bay
      - ../../exchange/landing-area:/home/jovyan/landing-area
      - ../../exchange/coco-data-lake:/home/jovyan/coco-data-lake

  kafka-coco:
    image: 'bitnami/kafka:latest'
    networks:
      - egeria_coco_network
    ports:
      - '8192:8192'
      - '8194:8194'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-coco:8193
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka-coco:8192,CONTROLLER://:8193,EXTERNAL://:8194
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-coco:8192,EXTERNAL://localhost:8194
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  postgres-coco:
    image: postgres:16.4
    container_name: postgres_for_coco_labs
    restart: always
    networks:
      - egeria_coco_network
    ports:
      - "127.0.0.1:5446:5446"
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: egeria
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./coco-labs-runtimes-data/coco-pg:/var/lib/postgresql/data/pgdata
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ../../../exchange/coco-data-lake:/var/data/coco-data-lake
    command: -p 5446 -c max_connections=1000

  # Proxy service for OpenLineage
  proxy-coco:
    build:
      dockerfile: Dockerfile-proxy
    container_name: openlineage-coco-proxy-backend
    depends_on:
      - kafka-coco
    networks:
      - egeria_coco_network
    ports:
      - "6800:6800"
      - "6801:6801"
    environment:
      - OPENLINEAGE_PROXY_CONFIG=/usr/src/app/proxy.yml
    volumes:
      - ./usr/src/app/build/libs:/usr/src/app/build/libs
      - ./proxy.yml:/usr/src/app/proxy.yml

  egeria-coco-core:
    depends_on:
      - kafka-coco
    image: 'docker.io/odpi/egeria-platform:latest'
    #        image: 'docker.io/odpi/egeria-platform:stable'
    networks:
      - egeria_coco_network
    ports:
      - '8443:8443'
    environment:
      - XTDB_ENABLE_BYTEUTILS_SHA1=True
      - XTDB_DISABLE_LIBCRYPTO=True
#      - startup.server.list=active-metadata-store,engine-host,integration-daemon,view-server
      - server.port=8443
    healthcheck:
      test: curl -k -X GET "https://localhost:8443/open-metadata/platform-services/users/garygeeke/server-platform/origin" || exit 1
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ../../../exchange/landing-area:/deployments/landing-area
      - ../../../exchange/distribution-hub:/deployments/distribution-hub
      - ../../../exchange/distribution-hub/surveys:/deployments/surveys
      - ../../../exchange/loading-bay:/deployments/loading-bay
      - ../../../exchange/coco-data-lake:/deployments/coco-data-lake

      - ./coco-labs-runtimes-data/coco-data-core/logs:/deployments/logs
      - ./coco-labs-runtimes-data/coco-data-core/servers:/deployments/data/servers
      - ./coco-labs-runtimes-data/coco-data-core/coco-core-application.properties:/deployments/application.properties


  egeria-coco-datalake:
    depends_on:
      - kafka-coco
    image: 'docker.io/odpi/egeria-platform:latest'
    #        image: 'docker.io/odpi/egeria-platform:stable'
    networks:
      - egeria_coco_network
    ports:
      - '8444:8444'
    environment:
      - XTDB_ENABLE_BYTEUTILS_SHA1=True
      - XTDB_DISABLE_LIBCRYPTO=True
#      - startup.server.list=active-metadata-store,engine-host,integration-daemon,view-server
      - server.port=8444
    healthcheck:
      test: curl -k -X GET "https://localhost:8444/open-metadata/platform-services/users/garygeeke/server-platform/origin" || exit 1
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ../../../exchange/landing-area:/deployments/landing-area
      - ../../../exchange/distribution-hub:/deployments/distribution-hub
      - ../../../exchange/distribution-hub/surveys:/deployments/surveys
      - ../../../exchange/loading-bay:/deployments/loading-bay
      - ../../../exchange/coco-data-lake:/deployments/coco-data-lake

      - ./coco-labs-runtimes-data/coco-data-datalake/logs:/deployments/logs
      - ./coco-labs-runtimes-data/coco-data-datalake/servers:/deployments/data/servers
      - ./coco-labs-runtimes-data/coco-data-datalake/coco-datalake-application.properties:/deployments/application.properties


  egeria-coco-development:
    depends_on:
      - kafka-coco
    image: 'docker.io/odpi/egeria-platform:latest'
    #        image: 'docker.io/odpi/egeria-platform:stable'
    networks:
      - egeria_coco_network
    ports:
      - '8445:8445'
    environment:
      - XTDB_ENABLE_BYTEUTILS_SHA1=True
      - XTDB_DISABLE_LIBCRYPTO=True
#      - startup.server.list=active-metadata-store,engine-host,integration-daemon,view-server
      - server.port=8445
    healthcheck:
      test: curl -k -X GET "https://localhost:8445/open-metadata/platform-services/users/garygeeke/server-platform/origin" || exit 1
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ../../../exchange/landing-area:/deployments/landing-area
      - ../../../exchange/distribution-hub:/deployments/distribution-hub
      - ../../../exchange/distribution-hub/surveys:/deployments/surveys
      - ../../../exchange/loading-bay:/deployments/loading-bay
      - ../../../exchange/coco-data-lake:/deployments/coco-data-lake

      - ./coco-labs-runtimes-data/coco-data-development/logs:/deployments/logs
      - ./coco-labs-runtimes-data/coco-data-development/servers:/deployments/data/servers
      - ./coco-labs-runtimes-data/coco-data-development/coco-dev-application.properties:/deployments/application.properties

#volumes:
#  zookeeper-data:
#    external: false
#  kafka-data:
#    external: false
#  egeria_postgres_data: # Define the reusable volume
#    driver: local
#    driver_opts:
#      type: none
#      device: ../../runtime-volumes/egeria-pg # Path to bind
#      o: bind

networks:
  egeria_coco_network:
    driver: bridge
    name: egeria_coco_network
