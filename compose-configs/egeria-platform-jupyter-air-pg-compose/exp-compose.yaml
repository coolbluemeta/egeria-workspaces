---
# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project


# To run
#   * Ensure Docker is installed and running
#   * Start Egeria Platform stack from the 'coco-lab-docker-compose' folder using:
#     'docker compose -f ./egeria-platform-jupyter-uc-compose.yaml up --build'
#   * Subsequent startups can be performed without the '--build' at the end
#   * Uninstall the containers by issuing 'docker compose -f ./egeria-platform-jupyter-uc-compose.yaml down'
#
# Assumptions:
#   * Ports 9443 and 9192 are available on the host system - these are the default ports for Kafka and Egeria.
#   * by default, the jupyter notebooks in the 'coco-jupyter-labs' folder are mounted and available for use by the jupyter notebooks
#   * by default, strict SSL validation is turned off
#
#
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
  build: .
  environment:
    &airflow-common-env
    AIRFLOW_PROJ_DIR: ../../runtime-volumes/airflow-volumes
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy


services:
    jupyter-hub:
        depends_on:
            egeria-main:
                condition: service_healthy

        image: quay.io/jupyter/scipy-notebook
        container_name: jupyter-work-air
        ports:
            - 8888:8888
        environment:
            JUPYTER_ENABLE_LAB: "yes"
            JUPYTER_TOKEN: "egeria"
        build:
            dockerfile: Dockerfile-jupyter

        volumes:
            - ./before-notebook.d:/usr/local/bin/before-notebook.d
            - ../../work:/home/jovyan/work
            - ../../workspaces:/home/jovyan/workspaces
            - ../../exchange/distribution-hub:/home/jovyan/distribution-hub
            - ../../exchange/loading-bay:/home/jovyan/loading-bay
            - ../../exchange/landing-area:/home/jovyan/landing-area
            - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh

    kafka:
         image: 'bitnami/kafka:latest'
         ports:
             - '9192:9192'

         environment:
             - KAFKA_CFG_NODE_ID=0
             - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
             - KAFKA_CFG_PROCESS_ROLES=controller,broker
             - KAFKA_CFG_LISTENERS=PLAINTEXT://:9192,CONTROLLER://:9193
             - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
             - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9193
             - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    
    egeria-main:
        depends_on:
            - kafka
        image: 'docker.io/odpi/egeria-platform:latest'
        ports:
            - '9443:9443'
        environment:
            - XTDB_ENABLE_BYTEUTILS_SHA1=True
            - XTDB_DISABLE_LIBCRYPTO=True
            - startup.server.list=active-metadata-store,engine-host,integration-daemon,view-server,simple-metadata-store
            - server.port=9443

        healthcheck:
            test: curl -k -X GET "https://localhost:9443/open-metadata/platform-services/users/garygeeke/server-platform/origin" || exit 1
            interval: 20s
            timeout: 10s
            retries: 3
            start_period: 10s


        volumes:
            - ../../exchange/landing-area:/deployments/landing-area
            - ../../exchange/distribution-hub:/deployments/distribution-hub
            - ../../exchange/distribution-hub/surveys:/deployments/surveys
            - ../../exchange/distribution-hub/logs:/deployments/logs
            - ../../runtime-volumes/egeria-platform-data/data:/deployments/data
            - ../../exchange/loading-bay:/deployments/loading-bay
            - ../../work:/deployments/work



    postgres:
       image: postgres:16
       volumes:
         - ../../runtime-volumes/pg_data:/var/lib/postgresql/data
         - ./scripts:/docker-entrypoint-initdb.d
       environment:
         POSTGRES_DB: airflow
         POSTGRES_USER: postgres
         POSTGRES_PASSWORD: postgres
         AIRFLOW_USER: airflow
         AIRFLOW_PASSWORD: airflow
         AIRFLOW_DB: airflow
         MARQUEZ_USER: marquez
         MARQUEZ_PASSWORD: marquez
         MARQUEZ_DB: marquez
         EXAMPLE_USER: example
         EXAMPLE_PASSWORD: example
         EXAMPLE_DB: example
         ALLOW_EMPTY_PASSWORD: yes
       logging:
         options:
           max-size: 10m
           max-file: "3"
       ports:
           - '5436:5432'
       healthcheck:
         test: [ "CMD", "pg_isready", "-U", "airflow" ]
         interval: 10s
         retries: 5
         start_period: 5s
       restart: always

    redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
      image: redis:7.2-bookworm
      expose:
        - 6379
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 30s
        retries: 50
        start_period: 30s
      restart: always

    airflow-webserver:
      <<: *airflow-common
      command: webserver
      ports:
        - "8090:8080"
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    airflow-scheduler:
      <<: *airflow-common
      command: scheduler
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    airflow-worker:
      <<: *airflow-common
      command: celery worker
      healthcheck:
        # yamllint disable rule:line-length
        test:
          - "CMD-SHELL"
          - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      environment:
        <<: *airflow-common-env
        # Required to handle warm shutdown of the celery workers properly
        # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
        DUMB_INIT_SETSID: "0"
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    airflow-triggerer:
      <<: *airflow-common
      command: triggerer
      healthcheck:
        test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    airflow-init:
      <<: *airflow-common
      entrypoint: /bin/bash
      # yamllint disable rule:line-length
      command:
        - -c
        - |
          if [[ -z "${AIRFLOW_UID}" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
            echo "If you are on Linux, you SHOULD follow the instructions below to set "
            echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
            echo "For other operating systems you can get rid of the warning with manually created .env file:"
            echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
            echo
          fi
          one_meg=1048576
          mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
          cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
          disk_available=$$(df / | tail -1 | awk '{print $$4}')
          warning_resources="false"
          if (( mem_available < 4000 )) ; then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
            echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
            echo
            warning_resources="true"
          fi
          if (( cpus_available < 2 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
            echo "At least 2 CPUs recommended. You have $${cpus_available}"
            echo
            warning_resources="true"
          fi
          if (( disk_available < one_meg * 10 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
            echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
            echo
            warning_resources="true"
          fi
          if [[ $${warning_resources} == "true" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
            echo "Please follow the instructions to increase amount of resources available:"
            echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
            echo
          fi
          mkdir -p /sources/logs /sources/dags /sources/plugins
          chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
          exec /entrypoint airflow version
      # yamllint enable rule:line-length
      environment:
        <<: *airflow-common-env
        _AIRFLOW_DB_MIGRATE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
        _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
        _PIP_ADDITIONAL_REQUIREMENTS: ''
      user: "0:0"
      volumes:
        - ${AIRFLOW_PROJ_DIR:-.}:/sources

    airflow-cli:
      <<: *airflow-common
      profiles:
        - debug
      environment:
        <<: *airflow-common-env
        CONNECTION_CHECK_MAX_COUNT: "0"
      # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
      command:
        - bash
        - -c
        - airflow

    # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
    # or by explicitly targeted on the command line e.g. docker-compose up flower.
    # See: https://docs.docker.com/compose/profiles/
    flower:
      <<: *airflow-common
      command: celery flower
      profiles:
        - flower
      ports:
        - "5555:5555"
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    marquez:
      image: marquezproject/marquez:latest
      ports:
        - "5050:5050"
        - "5051:5051"
      volumes:
        - ./scripts/wait-for-it.sh:/usr/src/app/wait-for-it.sh
      depends_on:
        - postgres
      entrypoint: ["./wait-for-it.sh", "postgres:5432", "--", "./entrypoint.sh"]
      # Enables SQL statement logging (see: https://www.postgresql.org/docs/12/runtime-config-logging.html#GUC-LOG-STATEMENT)
      # command: ["postgres", "-c", "log_statement=all"]

    marquez_web:
      image: marquezproject/marquez-web:latest
      environment:
        - MARQUEZ_HOST=marquez
        - MARQUEZ_PORT=5050
        - REACT_APP_ADVANCED_SEARCH=false
      ports:
        - "3000:3000"
      stdin_open: true
      tty: true
      depends_on:
        - marquez

#
# Change external to true and create volumes manually if you wish to persist between runs
#
volumes:
    zookeeper-data:
        external: false
    kafka-data:
        external: false
    db_home:
        external: false
    postgres-db-volume:
        driver: local
    redis_data:
        driver: local

